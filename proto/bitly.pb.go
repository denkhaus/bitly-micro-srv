// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bitly.proto

/*
Package denkhaus_micro_srv_bitly is a generated protocol buffer package.

It is generated from these files:
	bitly.proto

It has these top-level messages:
	Request
	Response
*/
package denkhaus_micro_srv_bitly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Response struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "denkhaus.micro.srv.bitly.Request")
	proto.RegisterType((*Response)(nil), "denkhaus.micro.srv.bitly.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Bitly service

type BitlyClient interface {
	Shorten(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type bitlyClient struct {
	c           client.Client
	serviceName string
}

func NewBitlyClient(serviceName string, c client.Client) BitlyClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "denkhaus.micro.srv.bitly"
	}
	return &bitlyClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *bitlyClient) Shorten(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Bitly.Shorten", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bitly service

type BitlyHandler interface {
	Shorten(context.Context, *Request, *Response) error
}

func RegisterBitlyHandler(s server.Server, hdlr BitlyHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Bitly{hdlr}, opts...))
}

type Bitly struct {
	BitlyHandler
}

func (h *Bitly) Shorten(ctx context.Context, in *Request, out *Response) error {
	return h.BitlyHandler.Shorten(ctx, in, out)
}

func init() { proto.RegisterFile("bitly.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xca, 0x2c, 0xc9,
	0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x48, 0x49, 0xcd, 0xcb, 0xce, 0x48, 0x2c,
	0x2d, 0xd6, 0xcb, 0xcd, 0x4c, 0x2e, 0xca, 0xd7, 0x2b, 0x2e, 0x2a, 0xd3, 0x03, 0xcb, 0x2b, 0x49,
	0x73, 0xb1, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x70, 0x31, 0x97, 0x16, 0xe5,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x4a, 0x32, 0x5c, 0x1c, 0x41, 0xa9, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x98, 0xb2, 0x46, 0xd1, 0x5c, 0xac, 0x4e, 0x20, 0x33, 0x84, 0x82,
	0xb8, 0xd8, 0x83, 0x33, 0xf2, 0x8b, 0x4a, 0x52, 0xf3, 0x84, 0x14, 0xf5, 0x70, 0xd9, 0xa4, 0x07,
	0xb5, 0x46, 0x4a, 0x09, 0x9f, 0x12, 0x88, 0x65, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x87, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xfd, 0xd9, 0x86, 0xc7, 0x00, 0x00, 0x00,
}
